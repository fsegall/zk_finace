/**
 * Example usage of artifacts generated by the Circuit Build API
 * 
 * This file demonstrates how to use the Base64 artifacts generated by the server
 * to create ZK proofs in a client-side application.
 */

import { base64ToUint8Array } from './utils';

/**
 * Generate a ZK proof using artifacts from the API
 */
export async function generateProofWithAPIArtifacts(
  input: any,
  circuitName: string = 'example_circuit'
): Promise<{ proof: any; publicSignals: any }> {
  try {
            // Import the artifacts (these would be loaded from the generated files)
        const wasmBase64 = await import(`./${circuitName}-wasm-base64.txt?raw`);
        const zkeyBase64 = await import(`./${circuitName}-zkey-base64.txt?raw`);
        const vkeyBase64 = await import(`./${circuitName}-vkey-base64.txt?raw`);
    
        // Convert Base64 to Uint8Array
        const wasmBuffer = base64ToUint8Array(wasmBase64.default);
        const zkeyBuffer = base64ToUint8Array(zkeyBase64.default);
        const vkeyBuffer = base64ToUint8Array(vkeyBase64.default);

    // Import snarkjs
    const snarkjs = await import('snarkjs');

    // Generate proof using fullProve (better for browser compatibility)
    const { proof, publicSignals } = await snarkjs.groth16.fullProve(
      input,
      wasmBuffer,
      zkeyBuffer
    );

    return { proof, publicSignals };
  } catch (error) {
    console.error('Error generating proof:', error);
    throw error;
  }
}

/**
 * API ZK Service class for easy integration
 */
export class APIZKService {
  private circuitName: string;
  private wasmBuffer?: Uint8Array;
  private zkeyBuffer?: Uint8Array;
  private vkeyBuffer?: Uint8Array;

  constructor(circuitName: string = 'example_circuit') {
    this.circuitName = circuitName;
  }

  /**
   * Load artifacts from generated files
   */
  async loadArtifacts(): Promise<void> {
    try {
                // Load artifacts from the generated files
          const wasmBase64 = await import(`./${this.circuitName}-wasm-base64.txt?raw`);
          const zkeyBase64 = await import(`./${this.circuitName}-zkey-base64.txt?raw`);
          const vkeyBase64 = await import(`./${this.circuitName}-vkey-base64.txt?raw`);
    
          this.wasmBuffer = base64ToUint8Array(wasmBase64.default);
          this.zkeyBuffer = base64ToUint8Array(zkeyBase64.default);
          this.vkeyBuffer = base64ToUint8Array(vkeyBase64.default);

      console.log(`✅ Artifacts loaded for circuit: ${this.circuitName}`);
    } catch (error) {
      console.error('❌ Failed to load artifacts:', error);
      throw error;
    }
  }

  /**
   * Generate a ZK proof
   */
  async generateProof(input: any): Promise<{ proof: any; publicSignals: any }> {
    if (!this.wasmBuffer || !this.zkeyBuffer) {
      throw new Error('Artifacts not loaded. Call loadArtifacts() first.');
    }

    try {
      const snarkjs = await import('snarkjs');
      
      const { proof, publicSignals } = await snarkjs.groth16.fullProve(
        input,
        this.wasmBuffer,
        this.zkeyBuffer
      );

      return { proof, publicSignals };
    } catch (error) {
      console.error('Error generating proof:', error);
      throw error;
    }
  }

  /**
   * Verify a ZK proof
   */
  async verifyProof(proof: any, publicSignals: any): Promise<boolean> {
    if (!this.vkeyBuffer) {
      throw new Error('Verification key not loaded. Call loadArtifacts() first.');
    }

    try {
      const snarkjs = await import('snarkjs');
      
      const isValid = await snarkjs.groth16.verify(
        this.vkeyBuffer,
        publicSignals,
        proof
      );

      return isValid;
    } catch (error) {
      console.error('Error verifying proof:', error);
      throw error;
    }
  }
}

/**
 * Example usage:
 * 
 * ```typescript
 * // Create service instance
 * const zkService = new APIZKService('example_circuit');
 * 
 * // Load artifacts
 * await zkService.loadArtifacts();
 * 
 * // Generate proof
 * const input = { a: 123 };
 * const { proof, publicSignals } = await zkService.generateProof(input);
 * 
 * // Verify proof
 * const isValid = await zkService.verifyProof(proof, publicSignals);
 * console.log('Proof is valid:', isValid);
 * ```
 */ 