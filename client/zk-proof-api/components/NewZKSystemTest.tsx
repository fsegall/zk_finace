import React, { useState } from 'react';
import { NewZKSystemTest } from '../test-new-zk-system';

export const NewZKSystemTestComponent: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);
  const [result, setResult] = useState<'success' | 'error' | null>(null);
  const [txHash, setTxHash] = useState<string>('');

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const runTest = async () => {
    setIsRunning(true);
    setLogs([]);
    setResult(null);

    // Intercept console.log to capture logs
    const originalLog = console.log;
    const originalError = console.error;
    const originalWarn = console.warn;
    
    console.log = (...args) => {
      originalLog(...args);
      addLog(args.join(' '));
    };
    
    console.error = (...args) => {
      originalError(...args);
      addLog(`❌ ${args.join(' ')}`);
    };

    console.warn = (...args) => {
      originalWarn(...args);
      addLog(`⚠️ ${args.join(' ')}`);
    };

    try {
      addLog('🚀 Starting new ZK system test...');
      
      const test = new NewZKSystemTest();
      const testResult = await test.runCompleteTest();
      
      if (testResult.success) {
        setResult('success');
        setTxHash(testResult.txHash || '');
        addLog('🎉 TEST COMPLETED SUCCESSFULLY!');
        if (testResult.txHash) {
          addLog(`🔗 TX Hash: ${testResult.txHash}`);
        }
      } else {
        setResult('error');
        addLog(`💥 TEST ERROR: ${testResult.error}`);
      }
      
    } catch (error) {
      setResult('error');
      addLog(`💥 TEST ERROR: ${error}`);
    } finally {
      setIsRunning(false);
      
      // Restore original console
      console.log = originalLog;
      console.error = originalError;
      console.warn = originalWarn;
    }
  };

  const saveLogs = () => {
    const logContent = logs.join('\n');
    const blob = new Blob([logContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `new-zk-system-test-${new Date().toISOString().slice(0, 19)}.log`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-background border border-border rounded-lg shadow-lg">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-foreground mb-2">
          🧪 Independent New ZK System Test
        </h2>
        <p className="text-foreground/80">
          Complete test of the new ZK system using artifacts generated by the API
        </p>
      </div>

      <div className="mb-6">
        <button
          onClick={runTest}
          disabled={isRunning}
          className={`px-6 py-3 rounded-lg font-semibold text-white ${
            isRunning
              ? 'bg-muted cursor-not-allowed'
              : 'bg-primary hover:bg-primary/90'
          }`}
        >
          {isRunning ? '🔄 Running...' : '🚀 Run Complete Test'}
        </button>

        {logs.length > 0 && (
          <button
            onClick={saveLogs}
            className="ml-4 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
          >
            💾 Save Logs
          </button>
        )}
      </div>

      {result && (
        <div className={`mb-6 p-4 rounded-lg border ${
          result === 'success' 
            ? 'bg-green-950/20 border-green-500/30 text-green-400'
            : 'bg-red-950/20 border-red-500/30 text-red-400'
        }`}>
          <h3 className="font-bold">
            {result === 'success' ? '✅ Success!' : '❌ Error!'}
          </h3>
          <p>
            {result === 'success' 
              ? 'The new ZK system worked perfectly!'
              : 'There was an error during the test.'
            }
          </p>
          
          {/* Subscan Link */}
          {result === 'success' && txHash && txHash !== 'pending' && (
            <div className="mt-4 p-3 bg-green-950/30 rounded border border-green-500/30">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-xl">🔗</span>
                <h4 className="font-bold text-green-400">Transaction Confirmed on Blockchain</h4>
              </div>
              <p className="text-green-300 mb-3 text-sm">
                Your ZK proof was generated, submitted and finalized successfully on the ZKVerify testnet!
              </p>
              <div className="bg-background/50 p-3 rounded border border-border">
                <strong className="text-green-400">🔗 View on Subscan Explorer:</strong>{' '}
                <a 
                  href={`https://zkverify-testnet.subscan.io/extrinsic/${txHash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-400 hover:text-blue-300 hover:underline break-all font-mono text-sm"
                >
                  {txHash}
                </a>
              </div>
            </div>
          )}
        </div>
      )}

      {logs.length > 0 && (
        <div className="bg-muted/50 text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto border border-border">
          <div className="mb-2 text-foreground font-semibold">📋 Test Logs:</div>
          {logs.map((log, index) => (
            <div key={index} className="mb-1">
              {log}
            </div>
          ))}
        </div>
      )}

      <div className="mt-6 p-4 bg-blue-950/20 rounded-lg border border-blue-500/30">
        <h3 className="font-bold text-blue-400 mb-2">📋 What this test does:</h3>
        <ul className="text-blue-300 space-y-1">
          <li>• Loads artifacts generated by API (WASM, ZKEY, VKEY)</li>
          <li>• Initializes ZKVerify session with Subwallet</li>
          <li>• Generates ZK proof using the new system</li>
          <li>• Submits proof to ZKVerify blockchain</li>
          <li>• Records all logs for analysis</li>
        </ul>
      </div>
    </div>
  );
}; 