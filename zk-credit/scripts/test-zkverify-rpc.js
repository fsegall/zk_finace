import 'dotenv/config';
import axios from 'axios';
import fs from 'fs';
import path from 'path';

// Configura√ß√µes
const VOLTA_RPC = 'https://volta-rpc.zkverify.io';
const VOLTA_API = 'https://api.volta.zksync.dev';
const ADDRESS = 'xph7MXyuL9B3WYLPBVz2S7wrs1mCzcBDXzMyv4qPMQcYJut7S';

async function testZKVerifyRPC() {
  console.log('üåê Testando Integra√ß√£o ZKVerify via RPC');
  console.log('==========================================\n');

  try {
    // 1. Teste de conectividade b√°sica
    console.log('1Ô∏è‚É£ Testando conectividade com RPC...');
    try {
      const healthResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'system_health',
        params: [],
        id: 1
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ RPC conectivo:', healthResponse.data.result);
    } catch (error) {
      console.log('‚ùå Erro RPC:', error.message);
    }

    // 2. Teste de informa√ß√µes da rede
    console.log('\n2Ô∏è‚É£ Obtendo informa√ß√µes da rede...');
    try {
      const chainResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'system_chain',
        params: [],
        id: 2
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ Rede:', chainResponse.data.result);
    } catch (error) {
      console.log('‚ùå Erro ao obter info da rede:', error.message);
    }

    // 3. Teste de vers√£o do node
    console.log('\n3Ô∏è‚É£ Obtendo vers√£o do node...');
    try {
      const versionResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'system_version',
        params: [],
        id: 3
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ Vers√£o:', versionResponse.data.result);
    } catch (error) {
      console.log('‚ùå Erro ao obter vers√£o:', error.message);
    }

    // 4. Teste de informa√ß√µes do endere√ßo
    console.log('\n4Ô∏è‚É£ Obtendo informa√ß√µes do endere√ßo...');
    try {
      const accountResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'system_accountNextIndex',
        params: [ADDRESS],
        id: 4
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ Pr√≥ximo nonce:', accountResponse.data.result);
    } catch (error) {
      console.log('‚ùå Erro ao obter nonce:', error.message);
    }

    // 5. Teste de saldo on-chain
    console.log('\n5Ô∏è‚É£ Consultando saldo on-chain...');
    try {
      const balanceResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'system_accountNextIndex',
        params: [ADDRESS],
        id: 5
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ Nonce atual:', balanceResponse.data.result);
      
      // Tentar obter informa√ß√µes da conta
      const accountResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'state_getStorage',
        params: [`0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9${ADDRESS.slice(2)}`],
        id: 6
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      if (accountResponse.data.result) {
        console.log('‚úÖ Dados da conta encontrados on-chain');
      } else {
        console.log('‚ÑπÔ∏è Conta n√£o encontrada ou sem dados espec√≠ficos');
      }
    } catch (error) {
      console.log('‚ùå Erro ao consultar saldo on-chain:', error.message);
    }

    // 6. Teste de informa√ß√µes de bloco
    console.log('\n6Ô∏è‚É£ Obtendo informa√ß√µes do √∫ltimo bloco...');
    try {
      const headerResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'chain_getHeader',
        params: [],
        id: 7
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ Header do bloco:', {
        number: headerResponse.data.result.number,
        hash: headerResponse.data.result.parentHash
      });
    } catch (error) {
      console.log('‚ùå Erro ao obter header:', error.message);
    }

    // 7. Teste de eventos de verifica√ß√£o (se dispon√≠vel)
    console.log('\n7Ô∏è‚É£ Testando consulta de eventos...');
    try {
      const eventsResponse = await axios.post(VOLTA_RPC, {
        jsonrpc: '2.0',
        method: 'state_getStorage',
        params: ['0x0000000000000000000000000000000000000000000000000000000000000000'],
        id: 8
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('‚úÖ Storage test:', eventsResponse.data);
    } catch (error) {
      console.log('‚ùå Erro ao consultar storage:', error.message);
    }

    // 8. Teste de endpoints espec√≠ficos da ZKVerify (se existirem)
    console.log('\n8Ô∏è‚É£ Testando endpoints espec√≠ficos da ZKVerify...');
    console.log('‚è≠Ô∏è Pulando endpoints externos (podem estar indispon√≠veis)...');

    console.log('\nüéâ Teste de RPC conclu√≠do!');
    console.log('‚úÖ Conectividade com ZKVerify verificada');
    console.log('‚úÖ Rede Volta est√° operacional');
    console.log('‚úÖ Comunica√ß√£o RPC funcionando perfeitamente');

  } catch (error) {
    console.error('‚ùå Erro geral no teste de RPC:', error.message);
    console.error('üìÅ Stack trace:', error.stack);
  }
}

// Executar o teste
testZKVerifyRPC(); 